/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MealPackage as PrismaMealPackage } from "@prisma/client";

export class MealPackageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MealPackageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mealPackage.count(args);
  }

  async mealPackages(
    args: Prisma.MealPackageFindManyArgs
  ): Promise<PrismaMealPackage[]> {
    return this.prisma.mealPackage.findMany(args);
  }
  async mealPackage(
    args: Prisma.MealPackageFindUniqueArgs
  ): Promise<PrismaMealPackage | null> {
    return this.prisma.mealPackage.findUnique(args);
  }
  async createMealPackage(
    args: Prisma.MealPackageCreateArgs
  ): Promise<PrismaMealPackage> {
    return this.prisma.mealPackage.create(args);
  }
  async updateMealPackage(
    args: Prisma.MealPackageUpdateArgs
  ): Promise<PrismaMealPackage> {
    return this.prisma.mealPackage.update(args);
  }
  async deleteMealPackage(
    args: Prisma.MealPackageDeleteArgs
  ): Promise<PrismaMealPackage> {
    return this.prisma.mealPackage.delete(args);
  }
}
